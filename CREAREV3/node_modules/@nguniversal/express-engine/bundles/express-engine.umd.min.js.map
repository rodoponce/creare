{"version":3,"file":"express-engine.umd.min.js","sources":["../../../../modules/express-engine/src/file-loader.ts","../../../../modules/express-engine/src/tokens.ts","../../../../modules/express-engine/src/main.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as fs from 'fs';\nimport { ResourceLoader } from '@angular/compiler';\n\nexport class FileLoader implements ResourceLoader {\n  get(url: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(url, (err: NodeJS.ErrnoException, buffer: Buffer) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(buffer.toString());\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Request, Response } from 'express';\nimport { InjectionToken } from '@angular/core';\n\nexport const REQUEST = new InjectionToken<Request>('REQUEST');\nexport const RESPONSE = new InjectionToken<Response>('RESPONSE');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as fs from 'fs';\nimport { Request, Response } from 'express';\n\nimport { NgModuleFactory, Type, CompilerFactory, Compiler, StaticProvider } from '@angular/core';\nimport { ResourceLoader } from '@angular/compiler';\nimport {\n  INITIAL_CONFIG,\n  renderModuleFactory,\n  platformDynamicServer\n} from '@angular/platform-server';\n\nimport { FileLoader } from './file-loader';\nimport { REQUEST, RESPONSE } from './tokens';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: Request;\n  res?: Response;\n  url?: string;\n  document?: string;\n}\n\n/**\n * This holds a cached version of each index used.\n */\nconst templateCache: { [key: string]: string } = {};\n\n/**\n * Map of Module Factories\n */\nconst factoryCacheMap = new Map<Type<{}>, NgModuleFactory<{}>>();\n\n/**\n * This is an express engine for handling Angular Applications\n */\nexport function ngExpressEngine(setupOptions: NgSetupOptions) {\n\n  const compilerFactory: CompilerFactory = platformDynamicServer().injector.get(CompilerFactory);\n  const compiler: Compiler = compilerFactory.createCompiler([\n    {\n      providers: [\n        { provide: ResourceLoader, useClass: FileLoader, deps: [] }\n      ]\n    }\n  ]);\n\n  return function (filePath: string,\n                   options: RenderOptions,\n                   callback: (err?: Error | null, html?: string) => void) {\n\n    options.providers = options.providers || [];\n\n    try {\n      const moduleOrFactory = options.bootstrap || setupOptions.bootstrap;\n\n      if (!moduleOrFactory) {\n        throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');\n      }\n\n      setupOptions.providers = setupOptions.providers || [];\n\n      const extraProviders = setupOptions.providers.concat(\n        options.providers,\n        getReqResProviders(options.req, options.res),\n        [\n          {\n            provide: INITIAL_CONFIG,\n            useValue: {\n              document: options.document || getDocument(filePath),\n              url: options.url || options.req.originalUrl\n            }\n          }\n        ]);\n\n      getFactory(moduleOrFactory, compiler)\n        .then(factory => {\n          return renderModuleFactory(factory, {\n            extraProviders\n          });\n        })\n        .then((html: string) => {\n          callback(null, html);\n        }, (err) => {\n          callback(err);\n        });\n    } catch (err) {\n      callback(err);\n    }\n  };\n}\n\n/**\n * Get a factory from a bootstrapped module/ module factory\n */\nfunction getFactory(\n  moduleOrFactory: Type<{}> | NgModuleFactory<{}>, compiler: Compiler\n): Promise<NgModuleFactory<{}>> {\n  return new Promise<NgModuleFactory<{}>>((resolve, reject) => {\n    // If module has been compiled AoT\n    if (moduleOrFactory instanceof NgModuleFactory) {\n      resolve(moduleOrFactory);\n      return;\n    } else {\n      let moduleFactory = factoryCacheMap.get(moduleOrFactory);\n\n      // If module factory is cached\n      if (moduleFactory) {\n        resolve(moduleFactory);\n        return;\n      }\n\n      // Compile the module and cache it\n      compiler.compileModuleAsync(moduleOrFactory)\n        .then((factory) => {\n          factoryCacheMap.set(moduleOrFactory, factory);\n          resolve(factory);\n        }, (err => {\n          reject(err);\n        }));\n    }\n  });\n}\n\n/**\n * Get providers of the request and response\n */\nfunction getReqResProviders(req: Request, res?: Response): StaticProvider[] {\n  const providers: StaticProvider[] = [\n    {\n      provide: REQUEST,\n      useValue: req\n    }\n  ];\n  if (res) {\n    providers.push({\n      provide: RESPONSE,\n      useValue: res\n    });\n  }\n  return providers;\n}\n\n/**\n * Get the document at the file path\n */\nfunction getDocument(filePath: string): string {\n  return templateCache[filePath] = templateCache[filePath] || fs.readFileSync(filePath).toString();\n}\n"],"names":["FileLoader","url","Promise","resolve","reject","fs.readFile","err","buffer","toString","REQUEST","InjectionToken","RESPONSE","templateCache","factoryCacheMap","Map","setupOptions","compiler","platformDynamicServer","injector","get","CompilerFactory","createCompiler","providers","provide","ResourceLoader","useClass","deps","filePath","options","callback","moduleOrFactory","bootstrap","Error","extraProviders_1","concat","req","res","useValue","push","INITIAL_CONFIG","document","fs.readFileSync","originalUrl","NgModuleFactory","moduleFactory","compileModuleAsync","then","factory","set","renderModuleFactory","extraProviders","html"],"mappings":"gfAOA,IAGAA,kCACEA,gBAAA,SAAIC,GACF,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,WAAYJ,EAAK,SAACK,EAA4BC,GAC5C,GAAID,EACF,OAAOF,EAAOE,GAGhBH,EAAQI,EAAOC,sBCRVC,EAAU,IAAIC,iBAAwB,WACtCC,EAAW,IAAID,iBAAyB,YC+B/CE,KAKAC,EAAkB,IAAIC,sBAK5B,SAAgCC,GAE9B,IACMC,EADmCC,0BAAwBC,SAASC,IAAIC,mBACnCC,iBAEvCC,YACIC,QAASC,iBAAgBC,SAAUzB,EAAY0B,aAKvD,OAAO,SAAUC,EACAC,EACAC,GAEfD,EAAQN,UAAYM,EAAQN,cAE5B,IACE,IAAMQ,EAAkBF,EAAQG,WAAahB,EAAagB,UAE1D,IAAKD,EACH,MAAM,IAAIE,MAAM,qEAGlBjB,EAAaO,UAAYP,EAAaO,cAEtC,IAAMW,EAAiBlB,EAAaO,UAAUY,OAC5CN,EAAQN,WAgEYa,EA/DDP,EAAQO,IA+DOC,EA/DFR,EAAQQ,IAgExCd,IAEFC,QAASd,EACT4B,SAAUF,IAGVC,GACFd,EAAUgB,MACRf,QAASZ,EACT0B,SAAUD,IAGPd,KAzEGC,QAASgB,iBACTF,UACEG,SAAUZ,EAAQY,WA6EXb,EA7EmCA,EA8E/Cf,EAAce,GAAYf,EAAce,IAAac,eAAgBd,GAAUnB,YA7E1EP,IAAK2B,EAAQ3B,KAAO2B,EAAQO,IAAIO,iBA0B5CZ,EArBeA,EAqBkCd,EArBjBA,EAuBzB,IAAId,QAA6B,SAACC,EAASC,GAEhD,GAAI0B,aAA2Ba,kBAC7BxC,EAAQ2B,OADV,CAIE,IAAIc,EAAgB/B,EAAgBM,IAAIW,GAGpCc,EACFzC,EAAQyC,GAKV5B,EAAS6B,mBAAmBf,GACzBgB,KAAK,SAACC,GACLlC,EAAgBmC,IAAIlB,EAAiBiB,GACrC5C,EAAQ4C,aACNzC,GACFF,EAAOE,SA1CRwC,KAAK,SAAAC,GACJ,OAAOE,sBAAoBF,GACzBG,qBAGHJ,KAAK,SAACK,GACLtB,EAAS,KAAMsB,IACd,SAAC7C,GACFuB,EAASvB,KAEb,MAAOA,GACPuB,EAASvB,GAwCf,IAA4B6B,EAAcC,EAClCd,EAhCNQ,EAAiDd,EAkD9BW"}